clean:
	${BUILD_SCRIPTS_PATH}RemoveTemporaryFiles.sh
	rm -rf test-results/
	find . -name "*.pyc" -exec rm -rf {} \;
	xcodebuild -alltargets clean
	
release:
	${BUILD_SCRIPTS_PATH}Build.py --project "${PROJECT_TO_BUILD}" --target "${PROJECT_TARGET_TO_BUILD}" --workspace "${WORKSPACE_TO_BUILD}" --scheme "${WORKSPACE_SCHEME_TO_BUILD}" --configuration "Release" --sdk "${SDK}"

debug:
	${BUILD_SCRIPTS_PATH}Build.py --project "${PROJECT_TO_BUILD}" --target "${PROJECT_TARGET_TO_BUILD}" --workspace "${WORKSPACE_TO_BUILD}" --scheme "${WORKSPACE_SCHEME_TO_BUILD}" --configuration "Debug" --sdk "${SDK}"
    
# create .ipa file from last built app product
ipa:
	${BUILD_SCRIPTS_PATH}MakeIPA.sh
    
# resign last built app product with iPhone Developer profile and package it into .ipa file
resigned_ipa_for_device:
	${BUILD_SCRIPTS_PATH}MakeResignedIPAForDevice.sh
    
# resign last built app product with iPhone Distribution AdHoc profile and package it into .ipa file
resigned_ipa_for_adhoc_distribution:
	${BUILD_SCRIPTS_PATH}MakeResignedIPAForAdHocDistribution.sh

# resign last built app product with Appstore distribution profile and package it into .ipa file
resigned_ipa_for_appstore:
	${BUILD_SCRIPTS_PATH}MakeResignedIPAForAppstore.sh

# build unit tests and run them in simulator
test:
	${BUILD_SCRIPTS_PATH}Build.py --project "${PROJECT_TO_BUILD}" --target "${PROJECT_TARGET_TO_TEST}" --workspace "${WORKSPACE_TO_BUILD}" --scheme "${WORKSPACE_SCHEME_TO_TEST}" --configuration "Release" --sdk "${SDK_FOR_TESTS}"
	${BUILD_SCRIPTS_PATH}RunTests.sh
	${BUILD_SCRIPTS_PATH}GenerateCodeCoverageReport.sh "${EXCLUDE_PATTERN_FOR_CODE_COVERAGE}" coverage.xml

# deploys built artifacts to given server
deploy:
	${BUILD_SCRIPTS_PATH}Deploy.sh "${DEPLOY_HOST}" "${DEPLOY_PATH}" "${DEPLOY_USERNAME}" "${DEPLOY_PASSWORD}"

# generates code duplication report
code_duplication_report:
	${BUILD_SCRIPTS_PATH}GenerateCodeDuplicationReport.sh "${EXCLUDE_PATTERN_FOR_CODE_DUPLICATION}" duplication.xml

# make SVN/git/mercurial tag, SCM_USERNAME and SCM_PASSWORD must be defined on calling this target
tag:
	${BUILD_SCRIPTS_PATH}MakeTag.sh "${SCM_USERNAME}" "${SCM_PASSWORD}"
    
# Jenkins stores SVN credentials locally in XML, so this target gets and uses them on making tag by finding the first credential in local credential storage
# additional |echo| is needed in order to add newline, otherwise base64 encoding doesn't work
# ATTENTION: if this script picks up wrong credentials, then you should manually edit subversion.credentials file on Jenkins in order to remove the wrong credential
svn_tag_from_jenkins:
	make tag SCM_USERNAME="$(shell xpath ../subversion.credentials \(//userName\)[1]/text\(\))"\
             SCM_PASSWORD="$(shell echo $$(xpath ../subversion.credentials \(//password\)[1]/text\(\) 2>/dev/null && echo) | openssl base64 -d)"

clean_working_copy:
	${BUILD_SCRIPTS_PATH}CleanWorkingCopy.sh