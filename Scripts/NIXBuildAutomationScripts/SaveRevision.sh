#!/bin/sh -e

# Created by Yuri Govorushchenko on 6/24/11.
# Copyright 2011 nix. All rights reserved.

# Script which saves next vars into _last_revision.sh:
#    SCM revision of working copy
#    "monotonic" revision (good for build numbers) of working copy
#    checks if working copy is not modified

currentScriptDir=$(cd "$(dirname "$0")"; pwd)
SCM_TYPE=$("${currentScriptDir}/DetectSCM.sh")

# Subversion
if [[ "${SCM_TYPE}" = "svn" ]]; then
    echo "SVN working copy detected"
    CURRENT_REVISION="$(svnversion)"
    CURRENT_MONOTONIC_REVISION=${CURRENT_REVISION} # SVN revision is already an incrementing number

    # simply check that the SVN version is a digit
    if [[ ${CURRENT_REVISION} =~ ^[0-9]+$ ]]; then
        WORKING_COPY_IS_CLEAN=1
    else
        echo "Working copy is not clean because of svnversion returning ${CURRENT_REVISION}"
        WORKING_COPY_IS_CLEAN=0
    fi

# git
elif [[ "${SCM_TYPE}" = "git" ]]; then
    echo "GIT working copy detected"
    CURRENT_REVISION="$(git rev-parse HEAD | xargs)"
    LAST_REVISION_IN_REPO="$(git rev-list --all | head -n 1 | xargs)"

    if [[ $CURRENT_REVISION == $LAST_REVISION_IN_REPO ]]; then
        UNLESS_STARTS_FROM=1
    else
        UNLESS_STARTS_FROM=2
    fi

    CURRENT_MONOTONIC_REVISION=$(git rev-list --all | perl -ne "print unless $UNLESS_STARTS_FROM../$CURRENT_REVISION/" | wc -l | xargs) # number of pushes before current

    if [[ $UNLESS_STARTS_FROM == 1 ]]; then
        CURRENT_MONOTONIC_REVISION=$(($CURRENT_MONOTONIC_REVISION + 1))
    fi

    STATUS="$(git status --porcelain)"

    if [[ "${STATUS}" = "" ]]; then
        WORKING_COPY_IS_CLEAN=1
    else
        # ignore changes to build folder, because it's created by Xcode before the script runs as a build phase
        LINES_COUNT=$(echo "$STATUS" | wc -l)

        if [ ${LINES_COUNT} != 1 ]; then
            printf "Working copy is not clean because of status:\n${STATUS}"
            WORKING_COPY_IS_CLEAN=0
        else
            MODIFIED_PATH=$(echo "$STATUS" | colrm 1 3)
            WC_ROOT=$(git rev-parse --show-toplevel)
            ABS_MODIFIED_PATH="${WC_ROOT}/${MODIFIED_PATH}"

            # compare path to Xcode env var
            if [[ "${ABS_MODIFIED_PATH}" -ef "${BUILD_ROOT}" ]]; then
                WORKING_COPY_IS_CLEAN=1
            else
                printf "Working copy is not clean because of status:\n${STATUS}"
                WORKING_COPY_IS_CLEAN=0
            fi
        fi
    fi

# mercurial
elif [[ "${SCM_TYPE}" = "mercurial" ]]; then
    echo "Mercurial working copy detected"
    CURRENT_REVISION="$(hg id -i)"
    CURRENT_MONOTONIC_REVISION="$(hg log --template '{rev}:{node|short} {desc|firstline} ({author})\n' | wc -l | tr -d ' ')" # number of pushes in current branch

    STATUS="$(hg status)"

    if [[ "${STATUS}" = "" ]]; then
        WORKING_COPY_IS_CLEAN=1
    else
        # ignore changes to build folder, because it's created by Xcode before the script runs as a build phase
        LINES_COUNT=$(echo "$STATUS" | wc -l)

        if [ ${LINES_COUNT} != 1 ]; then
            printf "Working copy is not clean because of status:\n${STATUS}"
            WORKING_COPY_IS_CLEAN=0
        else
            MODIFIED_PATH=$(echo "$STATUS" | colrm 1 3)
            WC_ROOT=$(git rev-parse --show-toplevel)
            ABS_MODIFIED_PATH="${WC_ROOT}/${MODIFIED_PATH}"

            # compare path to Xcode env var
            if [[ "${ABS_MODIFIED_PATH}" -ef "${BUILD_ROOT}" ]]; then
                WORKING_COPY_IS_CLEAN=1
            else
                printf "Working copy is not clean because of status:\n${STATUS}"
                WORKING_COPY_IS_CLEAN=0
            fi
        fi
    fi
    
# undefined SCM
else
    echo "warning: script must be run from working copy. Revision is undefined."

    CURRENT_REVISION="undefined"
    CURRENT_MONOTONIC_REVISION="undefined"
    WORKING_COPY_IS_CLEAN=0
fi

OUTPUT="
REVISION=\"${CURRENT_REVISION}\"
MONOTONIC_REVISION=\"${CURRENT_MONOTONIC_REVISION}\"
WORKING_COPY_IS_CLEAN=\"${WORKING_COPY_IS_CLEAN}\"
"

echo "${OUTPUT}"
echo "#!/bin/sh
### AUTOGENERATED BY SaveRevision.sh; DO NOT EDIT ###
${OUTPUT}" > _last_revision.sh